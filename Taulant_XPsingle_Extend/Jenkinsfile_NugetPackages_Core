#!groovy
def nexusSettings = [ nexusGroupID: 'FISKARS',
                      repositoryUrl: '/content/repositories/Releases/',
                      nexusArtifacts: [
                        core: [
                          name: 'Core',
                        ],
                        brand_fiskars: [
                           name: 'Brand Fiskars',
                         ]
                      ],
                      nexusBaseUrl: 'http://192.168.12.14:8081/nexus']
def gitSettings = [ defaultGitUserCredID: 'git-user',
                    defaultGitRepo: 'https://stash.ecx.io/scm/fiskars/fiskars-onedigital-core-cms.git',
                    defaultGitBranch: 'develop',
                    pipelineGitRepo: 'https://stash.ecx.io/scm/fiskars/fiskars-onedigital-core-deploy-cms.git',
                    pipelineGitBranch: 'master'
                  ]
def sonarSettings = [ sonarMsBuildPath: 'D:\\Deployment\\sonar-scanner-msbuild-4.3.1.1372-net46\\SonarScanner.MSBuild.exe',
                      sonarHostUrl: 'http://10.0.12.141:8080',
                      sonarProjectKey: 'FISKARSCMS',
                      sonarProjectName: 'Fiskars CMS']
def slackSettings = [ enableSlackNotification: true,
                      slackTokenID: 'slacktoken_Fiskars',
                      slackChannel: 'fiskars_jenkins',
                      slackBaseURL: 'https://ibm-ecxio.slack.com/services/hooks/jenkins-ci/',
                      teamDomain: 'ibm-ecxio',
                      isBotUser: false,
                      errorRecipients: '<@taulant.racaj1>']
def msbuildSettings = [ nugetPath: 'C:\\tools\\nuget.exe',
                        codeCoverageBuildPath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\TestAgent\\Team Tools\\Dynamic Code Coverage Tools\\CodeCoverage.exe',
                        msbuildPath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\15.0\\Bin\\msbuild.exe',
                        mstestConsolePath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\TestAgent\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe',
                        vsToolsPath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Microsoft\\VisualStudio\\v15.0',
                        msdeployPath: 'C:\\Program Files (x86)\\IIS\\Microsoft Web Deploy V3\\msdeploy.exe']
def globalSettings = [  userInputTimeout: 260000,
                        extendedMessageInfo: '']
def projectSettings = [ sourcecodeFolder: '',
                        buildServerNode: 'BUILD DEV',
                        pubxml: 'D:\\Deployment\\DEV\\DevProfile.pubxml',
                        websiteconfigfolder: 'configs\\fiskars.dev.sc',
                        iisWebsitename: 'fiskars.dev.sc',
                        iisWebsitenameXconnect: 'fiskars.dev.xconnect',
                        iisWebsitenameidentity: 'fiskars.dev.identityserver',
                        targetIISWebsitefolder: 'C:\\inetpub\\wwwroot\\fiskars.dev.sc',
                        targetIISWebsitefolderXconnect: 'C:\\inetpub\\wwwroot\\fiskars.dev.xconnect',
                        websiteBaselinefolder: 'D:\\Deployment\\DEV\\fiskars.dev.sc.baseline',
                        websiteBaselinefolderXconnect: 'D:\\Deployment\\DEV\\fiskars.dev.xconnect.baseline',
                        xconnectAutomationServiceName: 'fiskars.dev.xconnect-MarketingAutomationService',
                        xconnectIndexingWorkerServiceName: 'fiskars.dev.xconnect-IndexWorker',
                        xconnectProcessingEngineServiceName: 'fiskars.dev.xconnect-ProcessingEngineService',
                        solrServiceName: 'solr721',
                        sqlServer: [
                                hostname: '(local)',
                                dbuser: 'sa',
                                dbpasswd: 'zk2EZF4kLLqCImjBlGjT',
                                backupFilePathCore: 'D:\\Deployment\\DEV\\fiskars.dev_Core.baseline.bak',
                                backupDbNameCore: 'fiskars.dev_Core',
                                backupFilePathMaster: 'D:\\Deployment\\DEV\\fiskars.dev_Master.baseline.bak',
                                backupDbNameMaster: 'fiskars.dev_Master'
                        ]
                      ]
def nugetSettings = [
        nugetPath: 'C:\\tools\\nuget.exe',
        nugetUrl: 'http://build-ecx-sitecore.ecx.local:8081/repository/',
        nugetApiKey: '66b143d5-1513-3fe1-9143-03db027b01b1']

def lib = library('helper').io.ecx
def ecxHelper = lib.ECXHelperWindows.new(this)
def errors = lib.errors.ErrorHandler.new(this)
def errorMessage = ''

def nodeNames = ["master","${projectSettings.buildServerNode}"]

try
{
  stage('Interaction')
  {
    env.STAGE_NAME = 'Interaction'
    node('master')
    {
      def startMillis = System.currentTimeMillis()

      try
      {
        wrap([$class: 'BuildUser'])
                {
                  env.userFullName = "${BUILD_USER}"
                }
      }
      catch (Exception ex)
      {
        env.userFullName = "Jenkins"
      }
      if (slackSettings.enableSlackNotification)
      {
        slackSend teamDomain: "${slackSettings.teamDomain}", botUser: slackSettings.isBotUser, tokenCredentialId: "${slackSettings.slackTokenID}", channel: "${slackSettings.slackChannel}", message: "Started ${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME} by ${env.userFullName}"
      }
      try
      {
        timeout(time: globalSettings.userInputTimeout, unit: 'MILLISECONDS')
        {
            def lastUsedBranch = "${gitSettings.defaultGitBranch}"
            def  file_is_here = fileExists "${env.WORKSPACE}/../last_used_inputbranch_${env.JOB_NAME}.txt"
            if(file_is_here)
            {
              lastUsedBranch = readFile "${env.WORKSPACE}/../last_used_inputbranch_${JOB_NAME}.txt"
            }
            userInputBranch = input(
              id: 'userInputBranch',
              message: 'Please enter Branch Name for Nuget deploy from',
              parameters: [
                string(defaultValue: "${lastUsedBranch}", description: "eg: \"feature/xyz\" or \"hotfix/bla\" or simply \"develop\" branch", name: 'userInputBranch', trim: true)
              ])
            //if (!userInputBranch.matches("^release\\/release[0-9\\.]{2,}|hotfix\\/hotfix[0-9\\.]{2,}|develop")) {
            //  error('error_illegal_version')
            //}
            fileOperations([fileCreateOperation(fileContent: "${userInputBranch}", fileName: "../last_used_inputbranch_${JOB_NAME}.txt")])
        }

        if (binding.hasVariable('userInputBranch')) globalSettings.extendedMessageInfo += "Source branch for Nuget: ${userInputBranch}\n"
        if (slackSettings.enableSlackNotification)
        {
          slackSend teamDomain: "${slackSettings.teamDomain}", botUser: slackSettings.isBotUser, tokenCredentialId: "${slackSettings.slackTokenID}", channel: "${slackSettings.slackChannel}", message: "${globalSettings.extendedMessageInfo}\n (<${env.RUN_DISPLAY_URL}|Open>)"
        }
      }
      catch (Exception exception)
      {
        if (System.currentTimeMillis() - startMillis >= globalSettings.userInputTimeout)
        {
          error('error_input_timeout')
        }
        throw exception
      }
    }
  }

  stage('Clean & Init')
  {
    env.STAGE_NAME = 'Clean & Init'

    def branches = [:]
    for(nodeName in nodeNames)
    {
      def nodeNameVar = nodeName
      branches["${nodeNameVar}"] =
      {
        node("${nodeNameVar}")
        {
          ecxHelper.cleanUp()
          if(nodeNameVar.equals("master"))
          {
            dir('pipeline')
            {
              git branch: "${gitSettings.pipelineGitBranch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.pipelineGitRepo}"
            }
          }
          else
          {
            dir('pipeline')
            {
              git branch: "${gitSettings.pipelineGitBranch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.pipelineGitRepo}"
            }
            dir('sourcecode')
            {
              git branch: "${userInputBranch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.defaultGitRepo}"
              projectSettings.sourcecodeFolder = ecxHelper.getCurrentDirectory()
            }
          }
        }
      }
    }
    parallel branches
  }

  node("${projectSettings.buildServerNode}")
  {
    stage("Build Core")
    {
      env.STAGE_NAME = "Build Core"
      if(!fileExists('pipeline'))
      {
        dir('pipeline')
        {
          echo "==============================> Checking out Branch for Pipeline <=============================="
          git branch: "master", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.pipelineGitRepo}"
        }
      }

      dir("${projectSettings.sourcecodeFolder}/sc")
      {
        def targetFramework = 'net471'


        echo "==============================> Building framework ${targetFramework} <=============================="
        def status = ecxHelper.nugetRestoreMsbuild("${msbuildSettings.msbuildPath}", "Fiskars.Core.sln", "NuGet.config")
        //status += ecxHelper.msbuildSolution("${msbuildSettings.msbuildPath}", "Fiskars.Core.sln", "${projectSettings.pubxml}", "Release", "${projectSettings.sourcecodeFolder}\\sc\\output", "${msbuildSettings.vsToolsPath}")
        status += ecxHelper.msbuildSolution("${msbuildSettings.msbuildPath}", "Fiskars.Core.sln", "${projectSettings.pubxml}", "Package", "${projectSettings.sourcecodeFolder}\\sc\\output", "${msbuildSettings.vsToolsPath}")
        if (status == 1)
        {
          echo '==============================> FAILED: Build Solution! <=============================='
          if (slackSettings.enableSlackNotification)
          {
            slackSend teamDomain: "${slackSettings.teamDomain}", botUser: slackSettings.isBotUser, tokenCredentialId: "${slackSettings.slackTokenID}", channel: "${slackSettings.slackChannel}", color: "danger", message: "${env.JOB_NAME}: Build Phase failed: ${env.userFullName} (<${env.RUN_DISPLAY_URL}|Open>)"
          }
          throw new Exception()
        }
      }
    }

    stage("Upload Nuget Package")
    {
      env.STAGE_NAME = "Upload Nuget Package"
      if(!fileExists('pipeline'))
      {
        dir('pipeline')
        {
          echo "==============================> Checking out Branch for Pipeline <=============================="
          git branch: "master", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.pipelineGitRepo}"
        }
      }

      dir("${projectSettings.sourcecodeFolder}/sc")
      {
        echo "==============================> Push Nuget Package to Nexus <=============================="
        // fixed issue with filepath being too long with "\\?\" prefix from https://docs.microsoft.com/de-de/windows/desktop/FileIO/naming-a-file
        def status  = powershell(returnStatus: true, script: """
        \$nuget = '${nugetSettings.nugetPath}'
        \$buildConfig = 'Package' -replace '^([^\\.]*)\\.','\$1 '
        Write-Output \$buildConfig
        \$items = (Get-ChildItem -Path "*.nupkg" -Recurse -Verbose)
        foreach(\$item in \$items) {
          \$nugetFile = \$item.Name
          \$nugetFileWithoutExtension = \$item.BaseName
          \$nugetFilePath = \$item.Directory.FullName
          Set-Location \$nugetFilePath
          Write-Output \"\$nuget push -Source 'http://build-dus-fiskars-debian:8081/nexus/service/local/nuget/Core/' -ApiKey '${nugetSettings.nugetApiKey}' \$nugetFile\"
          Invoke-Expression \"\$nuget push -Source 'http://build-dus-fiskars-debian:8081/nexus/service/local/nuget/Core/' -ApiKey '${nugetSettings.nugetApiKey}' \$nugetFile\" -ErrorVariable \$pushOutput
          Start-Sleep -s 1
          if(\$LastExitCode -ne 1) { echo \$nugetFile >> '${projectSettings.sourcecodeFolder}\\sc\\nugetlist.txt' }
        }
        """)
        if (slackSettings.enableSlackNotification) {
          def  file_is_here = fileExists "${projectSettings.sourcecodeFolder}\\sc\\nugetlist.txt"
          if(file_is_here) {
            nugetmessage = readFile "nugetlist.txt"
            slackSend teamDomain: "${slackSettings.teamDomain}", botUser: slackSettings.isBotUser, tokenCredentialId: "${slackSettings.slackTokenID}", channel: "${slackSettings.slackChannel}", color: "good", message: "Updated Packages:\n${nugetmessage}"
          }
          else {
            slackSend teamDomain: "${slackSettings.teamDomain}", botUser: slackSettings.isBotUser, tokenCredentialId: "${slackSettings.slackTokenID}", channel: "${slackSettings.slackChannel}", color: "warning", message: "No changes detected"
          }
        }
      }

    }
  }
}
catch (Exception exception)
{
  errorMessage = exception.getMessage()
  errorMessage = "${slackSettings.errorRecipients}\n${errorMessage}"
  errors.defaultHandler(exception, slackSettings)
}
finally
{
  stage('Finalisation')
  {
    ecxHelper.defaultFinalisation(nodeNames, errorMessage, slackSettings)
  }
}