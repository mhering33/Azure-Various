#!groovy
def nexusSettings = [ nexusGroupID: 'FISKARS',
                      repositoryUrl: '/content/repositories/Releases/',
                      nexusArtifacts: [
                              core: [
                                      name: 'Core',
                              ],
                              brand_fiskars: [
                                      name: 'Brand Fiskars',
                              ]
                      ],
                      nexusBaseUrl: 'http://192.168.12.14:8081/nexus']
def gitSettings = [ defaultGitUserCredID: 'git-user',
                    defaultGitRepo: 'https://stash.ecx.io/scm/fiskars/fiskars-onedigital-core-cms.git',
                    defaultGitBranch: 'develop',
                    pipelineGitRepo: 'https://stash.ecx.io/scm/fiskars/fiskars-onedigital-core-deploy-cms.git',
                    pipelineGitBranch: 'master'
]
def sonarSettings = [ sonarMsBuildPath: 'D:\\Deployment\\sonar-scanner-msbuild-4.3.1.1372-net46\\SonarScanner.MSBuild.exe',
                      sonarHostUrl: 'http://10.0.12.141:8080',
                      sonarProjectKey: 'FISKARSCMS',
                      sonarProjectName: 'Fiskars CMS']
def slackSettings = [ enableSlackNotification: true,
                      slackTokenID: 'slacktoken_Fiskars',
                      slackChannel: 'fiskars_jenkins',
                      slackBaseURL: 'https://ibm-ecxio.slack.com/services/hooks/jenkins-ci/',
                      teamDomain: 'ibm-ecxio',
                      isBotUser: false,
                      errorRecipients: '<@taulant.racaj1>']
def msbuildSettings = [ nugetPath: 'C:\\tools\\nuget.exe',
                        codeCoverageBuildPath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\TestAgent\\Team Tools\\Dynamic Code Coverage Tools\\CodeCoverage.exe',
                        msbuildPath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\15.0\\Bin\\msbuild.exe',
                        mstestConsolePath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\TestAgent\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow\\vstest.console.exe',
                        vsToolsPath: 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\BuildTools\\MSBuild\\Microsoft\\VisualStudio\\v15.0',
                        msdeployPath: 'C:\\Program Files (x86)\\IIS\\Microsoft Web Deploy V3\\msdeploy.exe']
def globalSettings = [  userInputTimeout: 260000,
                        extendedMessageInfo: '']
def projectSettings = [ sourcecodeFolder: '',
                        buildServerNode: 'BUILD DEV',
                        pubxml: 'D:\\Deployment\\DEV\\DevProfile.pubxml',
                        websiteconfigfolder: 'configs\\fiskars.dev.sc',
                        iisWebsitename: 'fiskars.dev.sc',
                        iisWebsitenameXconnect: 'fiskars.dev.xconnect',
                        iisWebsitenameidentity: 'fiskars.dev.identityserver',
                        targetIISWebsitefolder: 'C:\\inetpub\\wwwroot\\fiskars.dev.sc',
                        targetIISWebsitefolderXconnect: 'C:\\inetpub\\wwwroot\\fiskars.dev.xconnect',
                        websiteBaselinefolder: 'D:\\Deployment\\DEV\\fiskars.dev.sc.baseline',
                        websiteBaselinefolderXconnect: 'D:\\Deployment\\DEV\\fiskars.dev.xconnect.baseline',
                        xconnectAutomationServiceName: 'fiskars.dev.xconnect-MarketingAutomationService',
                        xconnectIndexingWorkerServiceName: 'fiskars.dev.xconnect-IndexWorker',
                        xconnectProcessingEngineServiceName: 'fiskars.dev.xconnect-ProcessingEngineService',
                        solrServiceName: 'solr721',
                        sqlServer: [
                                hostname: '(local)',
                                dbuser: 'sa',
                                dbpasswd: 'zk2EZF4kLLqCImjBlGjT',
                                backupFilePathCore: 'D:\\Deployment\\DEV\\fiskars.dev_Core.baseline.bak',
                                backupDbNameCore: 'fiskars.dev_Core',
                                backupFilePathMaster: 'D:\\Deployment\\DEV\\fiskars.dev_Master.baseline.bak',
                                backupDbNameMaster: 'fiskars.dev_Master'
                        ],
                        brands: 
                        [
                          [ name: 'Fiskars',
                            gitRepo: 'https://stash.ecx.io/scm/fiskars/fiskars-onedigital-brand-fiskars-cms.git',
                            branch: 'develop'],
                          [ name: 'Gerber',
                            gitRepo: 'https://stash.ecx.io/scm/fiskars/fiskars-onedigital-brand-gerber-cms.git',
                            branch: 'develop'],
                          [ name: "RoyalDoulton",
                            gitRepo: "https://stash.ecx.io/scm/fiskars/fiskars-onedigital-brand-royaldoulton-cms.git",
                            branch: 'develop'],
                          [ name: "Waterford",
                            gitRepo: "https://stash.ecx.io/scm/fiskars/fiskars-onedigital-brand-waterford-cms.git",
                            branch: 'develop'],
                          [ name: "Wedgwood",
                            gitRepo: "https://stash.ecx.io/scm/fiskars/fiskars-onedigital-brand-wedgwood-cms.git",
                            branch: 'develop']
                        ]
]

def lib = library('helper').io.ecx
def ecxHelper = lib.ECXHelperWindows.new(this)
def errors = lib.errors.ErrorHandler.new(this)
def parser = lib.utils.ParseUtils.new(this)
def sonarUtils = lib.utils.sonar.SonarUtils.new(this)
def errorMessage = ''
def jsonData = ''

def nodeNames = ["master","${projectSettings.buildServerNode}"]

try
{
  stage('Interaction')
  {
    env.STAGE_NAME = 'Interaction'
    node('master')
    {
      try
      {
        wrap([$class: 'BuildUser'])
                {
                  env.userFullName = "${BUILD_USER}"
                }
      }
      catch (Exception ex)
      {
        env.userFullName = "Jenkins"
      }
      if (slackSettings.enableSlackNotification)
      {
        slackSend teamDomain: "${slackSettings.teamDomain}", botUser: slackSettings.isBotUser, tokenCredentialId: "${slackSettings.slackTokenID}", channel: "${slackSettings.slackChannel}", message: "Started ${env.JOB_NAME} ${env.BUILD_DISPLAY_NAME} by ${env.userFullName}"
      }

      startMillis = System.currentTimeMillis()

      try
      {
        timeout(time: globalSettings.userInputTimeout, unit: 'MILLISECONDS')
        {
          userInputSonarQubeAnalysisEnabled = input(
            id: 'userInputSonarQubeAnalysisEnabled',
            message: "Please define if a sonar qube analysis should be done",
            parameters: [
              [$class: 'ChoiceParameterDefinition', choices: 'Enable\nDisable', description: '', name: 'SonarQubeAnalysisEnabled']
            ]
          )

          def brandChoicesList = []
          projectSettings.brands.each { brand ->
            //brandChoicesList << "${brand.name}"
            brandChoicesList << booleanParam(defaultValue: false, name: "${brand.name}")
          }
          userInputBrand = input(
                  id: 'userInputBrand',
                  message: 'Which BRANDS should be deployed?',
                  parameters: brandChoicesList
          )

          echo "Selected Brand(s): ${userInputBrand}"

          //core
          def lastUsedBranchCore = "${gitSettings.defaultGitBranch}"
          def  file_is_here_core = fileExists "${env.WORKSPACE}/../last_used_inputbranch_Core_${env.JOB_NAME}.txt"
          if(file_is_here_core)
          {
            lastUsedBranchCore = readFile "${env.WORKSPACE}/../last_used_inputbranch_Core_${JOB_NAME}.txt"
          }
          userInputBranchCore = input(
                  id: 'userInputBranchCore',
                  message: "Please enter Branch Name to deploy from for CORE",
                  parameters: [
                          string(defaultValue: "${lastUsedBranchCore}", description: "eg: \"feature/xyz\" or \"hotfix/bla\" or simply \"develop\" branch", name: 'userInputBranchCore', trim: true)
                  ])
          
          fileOperations([fileCreateOperation(fileContent: "${userInputBranchCore}", fileName: "../last_used_inputbranch_Core_${JOB_NAME}.txt")])

          echo "Selected GIT Branch for Core: ${userInputBranchCore}"

          // brands
          projectSettings.brands.each { brand ->
            if (userInputBrand["${brand.name}"] == true) {
              def lastUsedBranch = "${gitSettings.defaultGitBranch}"
              def  file_is_here = fileExists "${env.WORKSPACE}/../last_used_inputbranch_${brand.name}_${env.JOB_NAME}.txt"
              if(file_is_here)
              {
                lastUsedBranch = readFile "${env.WORKSPACE}/../last_used_inputbranch_${brand.name}_${JOB_NAME}.txt"
              }
              userInputBranch = input(
                      id: "userInputBranch${brand.name}",
                      message: "Please enter Branch Name to deploy from for BRAND: ${brand.name}",
                      parameters: [
                              string(defaultValue: "${lastUsedBranch}", description: "eg: \"feature/xyz\" or \"hotfix/bla\" or simply \"develop\" branch", name: 'userInputBranch', trim: true)
                      ])

              brand.branch = userInputBranch
              fileOperations([fileCreateOperation(fileContent: "${userInputBranch}", fileName: "../last_used_inputbranch_${brand.name}_${JOB_NAME}.txt")])
              echo "Selected GIT Branch for ${brand.name}: ${userInputBranch}"
            }
          }

          globalSettings.extendedMessageInfo += "Brands: ${userInputBrand}\n"
          globalSettings.extendedMessageInfo += "Branch: ${userInputBranch}"
          if (slackSettings.enableSlackNotification)
          {
            slackSend teamDomain: "${slackSettings.teamDomain}", botUser: slackSettings.isBotUser, tokenCredentialId: "${slackSettings.slackTokenID}", channel: "${slackSettings.slackChannel}", message: "${globalSettings.extendedMessageInfo}\n (<${env.RUN_DISPLAY_URL}|Open>)"
          }
        }
      }
      catch (Exception exception)
      {
        endMillis = System.currentTimeMillis()
        if (endMillis - startMillis >= globalSettings.userInputTimeout)
        {
          error('error_input_timeout')
        }
        throw exception
      }
    }
  }

  stage('Clean & Init')
  {
    env.STAGE_NAME = 'Clean & Init'
    def branches = [:]
    nodeNames.each { nodeName ->
      def nodeNameVar = nodeName
      branches["${nodeNameVar}"] =
      {
        node("${nodeNameVar}")
        {
          ecxHelper.cleanUp()
          if (nodeNameVar.equals("master"))
          {
            dir('pipeline')
            {
              git branch: "${gitSettings.pipelineGitBranch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.pipelineGitRepo}"
            }
          }
          else
          {
            dir('pipeline')
            {
              git branch: "${gitSettings.pipelineGitBranch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.pipelineGitRepo}"
            }
            dir('sourcecode')
            {
              git branch: "${userInputBranchCore}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.defaultGitRepo}"
              projectSettings.sourcecodeFolder = ecxHelper.getCurrentDirectory()
              jsonData = readJSON file: 'sc/src/Project/Core/build-config.json'
            }
          }
        }
      }
    }
    parallel branches
  }

  stage('SonarQube analysis')
  {
    if (userInputSonarQubeAnalysisEnabled == "Enable")
    {
      node ("${projectSettings.buildServerNode}")
      {
        withSonarQubeEnv('ecxsonar')
        {
          dir("${projectSettings.sourcecodeFolder}\\sc")
          {
            def status = 0
            status += ecxHelper.nugetRestoreMsbuild("${msbuildSettings.msbuildPath}", "Fiskars.Core.sln", "NuGet.config")
            status += ecxHelper.msbuildSolution("${msbuildSettings.msbuildPath}", "Fiskars.Core.sln", "${projectSettings.pubxml}", "Debug", "${projectSettings.sourcecodeFolder}\\sc\\output", "${msbuildSettings.vsToolsPath}")
            if (status != 0)
            {
              throw new Exception()
            }
            def solutionFileContentString = readFile 'Fiskars.Core.sln'
            def mstest_list_string = parser.getTestProjectsFromSolutionFile("${solutionFileContentString}", "bin\\Debug\\")
            status += sonarUtils.startScan("${sonarSettings.sonarMsBuildPath}", "${msbuildSettings.msbuildPath}", "${msbuildSettings.mstestConsolePath}", "${msbuildSettings.codeCoverageBuildPath}", "${mstest_list_string}", "${projectSettings.sourcecodeFolder}\\sc", "Debug", "${sonarSettings.sonarProjectKey}", "${sonarSettings.sonarProjectName}", "N${BUILD_ID}")
            if (status != 0)
            {
              slackSend teamDomain: "${slackSettings.teamDomain}", botUser: slackSettings.isBotUser, tokenCredentialId: "${slackSettings.slackTokenID}", channel: "${slackSettings.slackChannel}", color: "warning", message: "There have been SONAR TEST failures - this is for now just a warning"
            }
          }
        }
      }
    }
  }

  stage('Build Brands')
  {
    env.STAGE_NAME = 'Build Brands'
    def branches = [:]
    projectSettings.brands.each { brand ->
      if (userInputBrand["${brand.name}"] == true)
      {
        def brandNameVar = brand.name
        def brandGitRepoVar = brand.gitRepo
        branches["MSBuild ${brandNameVar}"] =
        {
          node("${projectSettings.buildServerNode}")
          {
            dir("sourcecode_${brandNameVar}")
            {
              git branch: "${brand.branch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${brandGitRepoVar}"
            }
            dir("sourcecode_${brandNameVar}\\sc")
            {
              def status = 0
              status += ecxHelper.nugetRestoreMsbuild("${msbuildSettings.msbuildPath}", "Fiskars.${brandNameVar}.sln", "NuGet.config")
              status += ecxHelper.msbuildSolution("${msbuildSettings.msbuildPath}", "Fiskars.${brandNameVar}.sln", "${projectSettings.pubxml}", "Release", "${projectSettings.sourcecodeFolder}\\sc\\output", "${msbuildSettings.vsToolsPath}")
              //TODO output into an isolated folder - because it might fail with file used by another process aotherwise when copying it over - so lets merge this later without msbuild.
              if (status != 0)
              {
                throw new Exception()
              }
            }
          }
        }
        branches["Frontend ${brandNameVar}"] =
        {
          node ("master")
          {
            dir('pipeline')
            {
              git branch: "${gitSettings.pipelineGitBranch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.pipelineGitRepo}"
              load "tools.groovy"
            }
            def sourcecodeCore = ''
            dir('sourcecode')
            {
              sourcecodeCore = pwd()
              git branch: "${brand.branch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.defaultGitRepo}"
            }
            dir("sourcecode_${brandNameVar}")
            {
              git branch: "${brand.branch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${brandGitRepoVar}"
            }
            dir("sourcecode_${brandNameVar}/sc")
            {
              ecxHelper.mavenCommand("clean test -DcoreProjectPath=${sourcecodeCore}")
              stash includes: "${jsonData.pureProductionOutputFolder}/**", name: "stashFrontendFiles_${brandNameVar}"
            }
          }
          node ("${projectSettings.buildServerNode}")
          {
            dir("${projectSettings.sourcecodeFolder}\\sc\\output")
            {
              unstash "stashFrontendFiles_${brandNameVar}"
            }
          }
        }
      }
    }
    parallel branches
  }

  stage('Build Core')
  {
    env.STAGE_NAME = 'Build Core'
    parallel("MSBuild" :
    {
      node ("${projectSettings.buildServerNode}")
      {
        dir("${projectSettings.sourcecodeFolder}\\sc")
        {
          def status = 0
          status += ecxHelper.nugetRestoreMsbuild("${msbuildSettings.msbuildPath}", "Fiskars.Core.sln", "NuGet.config")
          status += ecxHelper.msbuildSolution("${msbuildSettings.msbuildPath}", "Fiskars.Core.sln", "${projectSettings.pubxml}", "Release", "${projectSettings.sourcecodeFolder}\\sc\\output", "${msbuildSettings.vsToolsPath}")
          if (status != 0)
          {
            throw new Exception()
          }
          dir("${projectSettings.sourcecodeFolder}\\${projectSettings.websiteconfigfolder}")
          {
            fileOperations([fileCopyOperation(excludes: "", includes: "**/**", targetLocation: "${projectSettings.sourcecodeFolder}\\sc\\output")])
          }
        }
      }
    },
    "Frontend Core" :
    {
      node ("master")
      {
        dir('pipeline')
        {
          load "tools.groovy"
        }
        dir('sourcecode')
        {
          git branch: "${userInputBranchCore}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${gitSettings.defaultGitRepo}"
        }
        dir("sourcecode/sc")
        {
          ecxHelper.mavenCommand("clean test")
          stash includes: "${jsonData.pureProductionOutputFolder}/**", name: 'stashFrontendFiles'
        }
      }
      node ("${projectSettings.buildServerNode}")
      {
        dir("${projectSettings.sourcecodeFolder}\\sc\\output")
        {
          unstash "stashFrontendFiles"
        }
      }
    })
  }

  stage('Deploy')
  {
    env.STAGE_NAME = 'Deploy'
    node("${projectSettings.buildServerNode}")
    {
      ecxHelper.website("${projectSettings.iisWebsitename}", "stop")
      ecxHelper.website("${projectSettings.iisWebsitenameXconnect}", "stop")
      ecxHelper.website("${projectSettings.iisWebsitenameidentity}", "stop")
      ecxHelper.windowsService("${projectSettings.solrServiceName}", "stop")
      ecxHelper.windowsService("${projectSettings.xconnectAutomationServiceName}", "stop")
      ecxHelper.windowsService("${projectSettings.xconnectProcessingEngineServiceName}", "stop")
      ecxHelper.windowsService("${projectSettings.xconnectIndexingWorkerServiceName}", "stop")
      //ecxHelper.restoreDatabase("${projectSettings.sqlServer.hostname}", "${projectSettings.sqlServer.backupDbNameCore}", "${projectSettings.sqlServer.backupFilePathCore}", "${projectSettings.sqlServer.dbuser}", "${projectSettings.sqlServer.dbpasswd}")
      //ecxHelper.restoreDatabase("${projectSettings.sqlServer.hostname}", "${projectSettings.sqlServer.backupDbNameMaster}", "${projectSettings.sqlServer.backupFilePathMaster}", "${projectSettings.sqlServer.dbuser}", "${projectSettings.sqlServer.dbpasswd}")
      ecxHelper.webDeployViaMsDeployFolderToFolder("${projectSettings.websiteBaselinefolder}", "${projectSettings.targetIISWebsitefolder}", "${msbuildSettings.msdeployPath}", "True", "App_Data\\logs")
      ecxHelper.webDeployViaMsDeployFolderToFolder("${projectSettings.websiteBaselinefolderXconnect}", "${projectSettings.targetIISWebsitefolderXconnect}", "${msbuildSettings.msdeployPath}", "True", "App_Data\\logs")
      ecxHelper.webDeployViaMsDeployFolderToFolder("${projectSettings.sourcecodeFolder}\\sc\\output", "${projectSettings.targetIISWebsitefolder}", "${msbuildSettings.msdeployPath}", "False", "")
      ecxHelper.windowsService("${projectSettings.solrServiceName}", "start")
      ecxHelper.windowsService("${projectSettings.xconnectAutomationServiceName}", "start")
      ecxHelper.windowsService("${projectSettings.xconnectProcessingEngineServiceName}", "start")
      ecxHelper.windowsService("${projectSettings.xconnectIndexingWorkerServiceName}", "start")
      ecxHelper.website("${projectSettings.iisWebsitename}", "start")
      ecxHelper.website("${projectSettings.iisWebsitenameXconnect}", "start")
      ecxHelper.website("${projectSettings.iisWebsitenameidentity}", "start")
    }
  }

  stage('Deploy TDS')
  {
    env.STAGE_NAME = 'Deploy TDS'
    node ("${projectSettings.buildServerNode}")
    {
      dir("${projectSettings.sourcecodeFolder}\\sc")
      {
        retry(5)
        {
          httpRequest url:'http://fiskars.dev.sc/_DEV/TdsService.asmx', timeout: 500
        }
        def status = ecxHelper.tdsDeploySolution("${msbuildSettings.msbuildPath}", "Fiskars.Core.sln", "DevTDS", "${projectSettings.pubxml}", "${msbuildSettings.vsToolsPath}")
        if (status != 0)
        {
          throw new Exception()
        }
      }
      projectSettings.brands.each { brand ->
        if (userInputBrand["${brand.name}"] == true)
        {
          dir("sourcecode_${brand.name}")
          {
            git branch: "${brand.branch}", credentialsId: "${gitSettings.defaultGitUserCredID}", url: "${brand.gitRepo}"
          }
          dir("sourcecode_${brand.name}\\sc")
          {
            def status = ecxHelper.tdsDeploySolution("${msbuildSettings.msbuildPath}", "Fiskars.${brand.name}.sln", "DevTDS", "${projectSettings.pubxml}", "${msbuildSettings.vsToolsPath}")
            if (status != 0)
            {
              throw new Exception()
            }
          }
        }
      }
    }
  }
}
catch (Exception exception)
{
  errorMessage = exception.getMessage()
  errorMessage = "${slackSettings.errorRecipients}\n${errorMessage}"
  errors.defaultHandler(exception, slackSettings)
}
finally
{
  stage('Finalisation')
  {
    ecxHelper.defaultFinalisation(nodeNames, errorMessage, slackSettings)
  }
}
